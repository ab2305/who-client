apply plugin: "com.android.application"

import com.android.build.OutputFile
buildscript {
	repositories {
		jcenter()
		maven { url 'https://maven.fabric.io/public' }
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:2.3.3'
		classpath 'io.fabric.tools:gradle:1.+'
	}
}

apply from: "../../node_modules/react-native/react.gradle"
apply plugin: 'io.fabric'

repositories {
	jcenter()
	maven { url 'https://maven.fabric.io/public' }
}

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.whoclient"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 21
        versionName "1.31"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }

		signingConfigs {
				release {
					storeFile file("oswho.jks")
					storePassword "oswho1210"
					keyAlias "oswho"
					keyPassword "oswho1210"
				}
		}

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
						signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    lintOptions {
      checkReleaseBuilds false
   }
}

dependencies {
    compile project(':react-native-image-picker')
    compile project(':react-native-billing')
    compile project(':react-native-vector-icons')
    compile project(':react-native-splash-screen')
    compile project(':react-native-fabric')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules

  compile project(':react-native-uploader')
// RNFirebase required dependencies
  compile(project(':react-native-firebase')) {
    transitive = false
  }

  compile 'com.android.support:multidex:1.0.1'
  compile "com.google.firebase:firebase-core:11.0.4"
  // If you are receiving Google Play API availability issues, add the following dependency
  compile "com.google.android.gms:play-services-base:11.0.4"
  compile "com.google.firebase:firebase-messaging:11.0.4"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
